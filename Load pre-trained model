import torch
import torchvision.models as models

# Transfer learning and fine-tuning a pre-trained model for an AI-powered driving app using the PyTorch deep learning framework in Python
# Load a pre-trained model, such as ResNet-18
model = models.resnet18(pretrained=True)


# Freeze early layers to prevent modification during fine-tuning
for param in model.parameters():
    param.requires_grad = False


# Add new layers to the model to allow for fine-grained learning specific to the AiDrive Driver app
model.fc = torch.nn.Linear(in_features=512, out_features=10)


# Train the fine-tuned model on a dataset of AiDrive Driver scenarios
criterion = torch.nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.fc.parameters(), lr=0.001, momentum=0.9)

for epoch in range(10):  # Train for 10 epochs
    running_loss = 0.0
    for i, data in enumerate(driving_dataset, 0):
        inputs, labels = data

        # Zero the gradient buffers
        optimizer.zero_grad()

        # Forward pass
        outputs = model(inputs)
        loss = criterion(outputs, labels)

        # Backward pass and optimization
        loss.backward()
        optimizer.step()

        # Print statistics
        running_loss += loss.item()
    print('Epoch %d loss: %.3f' % (epoch + 1, running_loss / (i + 1)))

print('Finished training')


# Evaluate the fine-tuned model on a validation set
correct = 0
total = 0
with torch.no_grad():
    for data in validation_dataset:
        inputs, labels = data
        outputs = model(inputs)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print('Accuracy of the network on the validation set: %d %%' % (100 * correct / total))


# Save the fine-tuned model to a file for deployment in the AiDrive Driver app
torch.save(model.state_dict(), 'driving_app_model.pth')
